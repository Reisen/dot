# Basic Snippets
# ------------------------------------------------------------------------------
snippet #! "Hashbang String" b
#!/usr/bin/env python
$0
endsnippet

snippet main "Python Main" b
if __name__ == '__main__':
	${1:main()}$0
endsnippet

snippet for "For Loop Ender" i
${3:$1} for ${1:v} in ${2:iterable}
endsnippet

snippet for "For Loop" b
for ${1:item} in ${2:iterable}:
	${3:pass}
endsnippet

global !p

NORMAL  = 0x1
DOXYGEN = 0x2
SPHINX  = 0x3

SINGLE_QUOTES = 0x1
DOUBLE_QUOTES = 0x2

def get_args(arglist):
	args = [arg.split('=')[0].strip() for arg in arglist.split(',') if arg]
	args = [arg for arg in args if arg and arg != "self"]

	return args


def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES

def tripple_quotes(snip):
	if get_quoting_style(snip) == SINGLE_QUOTES:
		return "'''"
	return '"""'

def get_style(snip):
	style = snip.opt("g:ultisnips_python_style", "normal")

	if    style == "doxygen": return DOXYGEN
	elif  style == "sphinx": return SPHINX
	else: return NORMAL


def format_arg(arg, style):
	if style == DOXYGEN:
		return "@param %s @todo" % arg
	elif style == SPHINX:
		return ":param %s: @todo" % arg
	elif style == NORMAL:
		return ":%s: @todo" % arg


def format_return(style):
	if style == DOXYGEN:
		return "@return: @todo"
	elif style in (NORMAL, SPHINX):
		return ":returns: @todo"


def write_docstring_args(args, snip):
	if not args:
		snip.rv += ' {0}'.format(tripple_quotes(snip))
		return

	snip.rv += '\n' + snip.mkline('', indent='')

	style = get_style(snip)

	for arg in args:
		snip += format_arg(arg, style)


def write_init_body(args, parents, snip):
	parents = [p.strip() for p in parents.split(",")]
	parents = [p for p in parents if p != 'object']

	for p in parents:
		snip += p + ".__init__(self)"

	if parents:
		snip.rv += '\n' + snip.mkline('', indent='')

	for arg in args:
		snip += "self._%s = %s" % (arg, arg)


def write_slots_args(args, snip):
	args = ['"_%s"' % arg for arg in args]
	snip += '__slots__ = (%s,)' % ', '.join(args)

endglobal

snippet class "Class with Automatic Assignment" b
class ${1:MyClass}(${2:object}):
	def __init__(self$4): `!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_init_body(args, t[2], snip)
`
		$0
endsnippet

snippet def "Python Function" b
def ${1:function}($2):
	${0:pass}
endsnippet

snippet /(^|(?<=\W))\./ "Expand . to Self" r
self.
endsnippet

snippet from "Import From Module" b
from ${1:module} import ${2:name}
endsnippet

snippet if "Python If" b
if ${1:condition}:
	${2:pass}
endsnippet

snippet ifelse "If then Else" b
if ${1:condition}:
	${2:pass}
else:
	${3:pass}
endsnippet

##########################
# Try / Except / Finally #
##########################
snippet try "Try / Except" b
try:
	${1:pass}

except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

# vim:ft=snippets:
