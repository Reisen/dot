# C++ Snippets
# ------------------------------------------------------------------------------

global !p
# Bracket style awareness. Set g:ultisnips_cpp_brace_style to "nl" for brackets
# inserted onto new lines.
def nl(snip):
	if snip.opt("g:ultisnips_cpp_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "

# Newline after function type awareness. Set g:ultisnips_cpp_type_style to "nl"
# for newlines after types.
def tl(snip):
	if snip.opt("g:ultisnips_cpp_type_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
endglobal

snippet #d "#define" b
#define ${1}
endsnippet

snippet #if "#if then #endif" b
#if ${1:0}
${VISUAL}${0:${VISUAL/(.*)/(?1::code)/}}
#endif
endsnippet

snippet #i "#include local header (inc)" b
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet #I "#include <> (Inc)" b
#include <$1>
endsnippet

snippet main "Main Function" b
int`!p tl(snip)`main()`!p nl(snip)`{
	return 0;
}
endsnippet

snippet for "For Loop"
for(${2:i} = 0; $2 < ${1:count}; ${3:++$2})`!p nl(snip)`{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet while "While Loop"
while(${1:true})`!p nl(snip)`{
	${VISUAL}$0
}
endsnippet

snippet if "If Expression"
if(${1:true})`!p nl(snip)`{
	${VISUAL}${0}
}
endsnippet

snippet elif "Else If Expression"
else if(${1:true})`!p nl(snip)`{
	${VISUAL}${0}
}
endsnippet

snippet el "Else Expression"
else`!p nl(snip)`{
	${VISUAL}${0}
}
endsnippet

snippet enum "Enumeration"
typedef enum _${1:Name}`!p nl(snip)`{
	$0
} $1;
endsnippet

snippet struct "Struct"
typedef struct _${1:Name}`!p nl(snip)`{
	$0
} $1;
endsnippet

snippet def "Function"
${1:void}`!p tl(snip)`${2:Name}($3)`!p nl(snip)`{
	${VISUAL}$0
}
endsnippet
